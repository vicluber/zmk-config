/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500 // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20 // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        borrarbackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
        };

        Arrobaaltizq {
            bindings = <&kp RA(N2)>;
            key-positions = <50 2>;
        };

        leftbksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3    &kp N4  &kp N5                          &kp N6  &kp N7  &kp N8         &kp N9   &kp N0    &kp MINUS
&kp TAB           &kp Q   &kp W   &kp E     &kp R   &kp T                           &kp Y   &kp U   &kp I          &kp O    &kp P     &kp LBKT
&kp LEFT_SHIFT    &kp A   &kp S   &kp D     &kp F   &kp G                           &kp H   &kp J   &kp K          &kp L    &kp SEMI  &kp RBKT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C     &kp V   &kp B   &kp ENTER    &kp ENTER  &kp N   &kp M   &kp COMMA      &kp DOT  &kp FSLH  &kp NON_US_BSLH
                                  &kp LALT  &mo 3   &mo 2   &kp SPACE    &kp SPACE  &mo 1   &mo 3   &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4                    &trans          &trans          &trans          &trans           &trans     &bt BT_CLR_ALL
&trans      &trans        &trans          &kp UP_ARROW    &trans           &trans                          &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans     &trans
&trans      &trans        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                          &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp LCLK  &trans
&trans      &trans        &trans          &trans          &trans           &trans        &trans    &trans  &trans          &trans          &trans          &trans           &trans     &kp DELETE
                                          &trans          &trans           &trans        &trans    &trans  &trans          &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F1  &kp F2  &kp F3          &kp F4          &kp F5           &kp F6                    &kp F7    &kp F8    &kp F9    &kp F10   &kp F11  &kp F12
&trans  &trans  &trans          &kp UP_ARROW    &trans           &trans                    &trans    &trans    &trans    &trans    &trans   &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                    &kp BSLH  &kp PIPE  &kp LBRC  &kp RBRC  &trans   &trans
&trans  &trans  &trans          &trans          &trans           &trans  &trans    &trans  &trans    &trans    &trans    &trans    &trans   &trans
                                &trans          &trans           &trans  &trans    &trans  &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans                    &trans            &trans          &trans            &trans     &trans    &trans
&trans      &trans             &trans           &trans                &trans                &trans                    &kp DOLLAR        &kp LBKT        &kp ASTERISK      &kp ASTRK  &kp STAR  &trans
&trans      &trans             &trans           &trans                &trans                &trans                    &kp LESS_THAN     &kp UNDERSCORE  &kp PIPE          &trans     &trans    &trans
&trans      &trans             &trans           &trans                &trans                &trans  &trans    &trans  &kp GREATER_THAN  &kp TILDE       &kp GREATER_THAN  &trans     &trans    &trans
                                                &trans                &trans                &trans  &trans    &trans  &trans            &trans          &trans
            >;
        };
    };
};
